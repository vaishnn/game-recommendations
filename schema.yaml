# schema.yaml (Version 14.1 - Re-integrated DLC linking logic)

drop_order:
  - pending_dlc_links
  - scrape_status
  - app_tags
  - app_supported_languages
  - app_categories
  - app_genres
  - app_publishers
  - app_developers
  - app_reviews
  - reviews
  - achievements
  - apps
  - tags
  - languages
  - genres
  - categories
  - publishers
  - developers

create_order:
  - developers
  - publishers
  - categories
  - genres
  - languages
  - tags
  - apps
  - pending_dlc_links
  - achievements
  - reviews
  - app_reviews
  - app_developers
  - app_publishers
  - app_genres
  - app_categories
  - app_supported_languages
  - app_tags
  - scrape_status

tables:
  # ... (developers, publishers, etc. are the same)
  developers: |
    CREATE TABLE IF NOT EXISTS developers ( id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255) UNIQUE NOT NULL );
  publishers: |
    CREATE TABLE IF NOT EXISTS publishers ( id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255) UNIQUE NOT NULL );
  categories: |
    CREATE TABLE IF NOT EXISTS categories ( id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255) UNIQUE NOT NULL );
  genres: |
    CREATE TABLE IF NOT EXISTS genres ( id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255) UNIQUE NOT NULL );
  languages: |
    CREATE TABLE IF NOT EXISTS languages ( id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255) UNIQUE NOT NULL );
  tags: |
    CREATE TABLE IF NOT EXISTS tags ( id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255) UNIQUE NOT NULL );
  apps: |
    CREATE TABLE IF NOT EXISTS apps (
      id INT PRIMARY KEY, type VARCHAR(50) NOT NULL, name VARCHAR(255) NOT NULL, base_game_id INT, release_date DATE, price DECIMAL(10, 2), positive_reviews INT, negative_reviews INT, recommendations INT, peak_ccu INT, metacritic_score INT, metacritic_url VARCHAR(512), required_age INT, achievements_count INT, supports_windows BOOLEAN, supports_mac BOOLEAN, supports_linux BOOLEAN, header_image_url VARCHAR(512), estimated_owners VARCHAR(50), user_score INT, score_rank VARCHAR(50), about_the_game TEXT, detailed_description TEXT, short_description TEXT, reviews_summary TEXT,
      FOREIGN KEY (base_game_id) REFERENCES apps(id) ON DELETE SET NULL
    );
  pending_dlc_links: |
    CREATE TABLE IF NOT EXISTS pending_dlc_links (
      dlc_id INT PRIMARY KEY, base_game_id INT NOT NULL, INDEX (base_game_id)
    );
  # ... (achievements, reviews, etc. are the same)
  achievements: |
    CREATE TABLE IF NOT EXISTS achievements ( id INT AUTO_INCREMENT PRIMARY KEY, app_id INT NOT NULL, api_name VARCHAR(255) NOT NULL, display_name VARCHAR(255), description TEXT, global_completion_rate DECIMAL(7, 4), UNIQUE KEY app_api_name_unique (app_id, api_name), FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE CASCADE );
  reviews: |
    CREATE TABLE IF NOT EXISTS reviews ( review_id BIGINT PRIMARY KEY, author_steamid BIGINT, language VARCHAR(50), review_text TEXT, is_recommended BOOLEAN, votes_helpful INT, votes_funny INT, review_date DATETIME, review_source VARCHAR(100) DEFAULT 'Steam' );
  app_reviews: |
    CREATE TABLE IF NOT EXISTS app_reviews ( app_id INT NOT NULL, review_id BIGINT NOT NULL, PRIMARY KEY (app_id, review_id), FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE CASCADE, FOREIGN KEY (review_id) REFERENCES reviews(review_id) ON DELETE CASCADE );
  app_developers: |
    CREATE TABLE IF NOT EXISTS app_developers ( app_id INT NOT NULL, developer_id INT NOT NULL, PRIMARY KEY (app_id, developer_id), FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE CASCADE, FOREIGN KEY (developer_id) REFERENCES developers(id) ON DELETE CASCADE );
  app_publishers: |
    CREATE TABLE IF NOT EXISTS app_publishers ( app_id INT NOT NULL, publisher_id INT NOT NULL, PRIMARY KEY (app_id, publisher_id), FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE CASCADE, FOREIGN KEY (publisher_id) REFERENCES publishers(id) ON DELETE CASCADE );
  app_categories: |
    CREATE TABLE IF NOT EXISTS app_categories ( app_id INT NOT NULL, category_id INT NOT NULL, PRIMARY KEY (app_id, category_id), FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE CASCADE, FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE );
  app_genres: |
    CREATE TABLE IF NOT EXISTS app_genres ( app_id INT NOT NULL, genre_id INT NOT NULL, PRIMARY KEY (app_id, genre_id), FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE CASCADE, FOREIGN KEY (genre_id) REFERENCES genres(id) ON DELETE CASCADE );
  app_supported_languages: |
    CREATE TABLE IF NOT EXISTS app_supported_languages ( app_id INT NOT NULL, language_id INT NOT NULL, is_full_audio BOOLEAN DEFAULT FALSE, PRIMARY KEY (app_id, language_id), FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE CASCADE, FOREIGN KEY (language_id) REFERENCES languages(id) ON DELETE CASCADE );
  app_tags: |
    CREATE TABLE IF NOT EXISTS app_tags ( app_id INT NOT NULL, tag_id INT NOT NULL, tag_value INT, PRIMARY KEY (app_id, tag_id), FOREIGN KEY (app_id) REFERENCES apps(id) ON DELETE CASCADE, FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE );
  scrape_status: |
    CREATE TABLE IF NOT EXISTS scrape_status ( appid INT PRIMARY KEY, status VARCHAR(50), timestamp DATETIME DEFAULT CURRENT_TIMESTAMP );

queries:
  apps:
    insert_update: |
      INSERT INTO apps (
          id, type, name, release_date, price, positive_reviews, negative_reviews,
          recommendations, peak_ccu, metacritic_score, metacritic_url, required_age,
          achievements_count, supports_windows, supports_mac, supports_linux,
          header_image_url, estimated_owners, user_score, score_rank, about_the_game,
          detailed_description, short_description, reviews_summary
      ) VALUES (
          %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
      )
      ON DUPLICATE KEY UPDATE
          type=VALUES(type), name=VALUES(name), release_date=VALUES(release_date), price=VALUES(price),
          positive_reviews=VALUES(positive_reviews), negative_reviews=VALUES(negative_reviews),
          recommendations=VALUES(recommendations), peak_ccu=VALUES(peak_ccu),
          metacritic_score=VALUES(metacritic_score), metacritic_url=VALUES(metacritic_url),
          required_age=VALUES(required_age), achievements_count=VALUES(achievements_count),
          supports_windows=VALUES(supports_windows), supports_mac=VALUES(supports_mac),
          supports_linux=VALUES(supports_linux), header_image_url=VALUES(header_image_url),
          estimated_owners=VALUES(estimated_owners), user_score=VALUES(user_score),
          score_rank=VALUES(score_rank), about_the_game=VALUES(about_the_game),
          detailed_description=VALUES(detailed_description), short_description=VALUES(short_description),
          reviews_summary=VALUES(reviews_summary)
  achievements:
    insert_update: |
      INSERT INTO achievements (app_id, api_name, display_name, description, global_completion_rate) VALUES (%s, %s, %s, %s, %s) ON DUPLICATE KEY UPDATE display_name=VALUES(display_name), description=VALUES(description), global_completion_rate=VALUES(global_completion_rate)
  reviews:
    insert_update: |
      INSERT INTO reviews (review_id, author_steamid, language, review_text, is_recommended, votes_helpful, votes_funny, review_date) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) ON DUPLICATE KEY UPDATE review_text=VALUES(review_text), is_recommended=VALUES(is_recommended), votes_helpful=VALUES(votes_helpful), votes_funny=VALUES(votes_funny)
  scrape_status:
    is_processed: "SELECT 1 FROM scrape_status WHERE appid = %s"
    all_prcoessed: "SELECT appid FROM scrape_status"
    mark_processed: "INSERT INTO scrape_status (appid, status) VALUES (%s, %s) ON DUPLICATE KEY UPDATE status=VALUES(status), timestamp=CURRENT_TIMESTAMP"
  lookup_tables:
    insert_ignore: "INSERT IGNORE INTO {table} (name) VALUES (%s)"
    select_id: "SELECT id FROM {table} WHERE name = %s"
  junction_tables:
    insert_ignore: "INSERT IGNORE INTO {table} VALUES (%s, %s)"
    insert_language: "INSERT INTO app_supported_languages (app_id, language_id, is_full_audio) VALUES (%s, %s, %s) ON DUPLICATE KEY UPDATE is_full_audio=VALUES(is_full_audio)"
    insert_tag: "INSERT IGNORE INTO app_tags (app_id, tag_id, tag_value) VALUES (%s, %s, %s)"
    insert_reviews: "INSERT IGNORE INTO app_reviews (app_id, review_id) VALUES (%s, %s)"
    add_pending_dlc_link: "INSERT IGNORE INTO pending_dlc_links (dlc_id, base_game_id) VALUES (%s, %s)"
  utility_queries:
    resolve_dlc_links: |
      UPDATE apps a
      JOIN pending_dlc_links p ON a.id = p.dlc_id
      JOIN apps base_game ON base_game.id = p.base_game_id
      SET a.base_game_id = p.base_game_id
    clear_resolved_dlc_links: |
      DELETE p FROM pending_dlc_links p
      JOIN apps a ON p.dlc_id = a.id
      WHERE a.base_game_id IS NOT NULL
